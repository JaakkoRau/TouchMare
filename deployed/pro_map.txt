com.jjr.touchmare.AlienAmmo -> com.jjr.touchmare.a:
    com.jjr.touchmare.AlienShipMover parent -> a
    int skillLevel -> a
    javax.microedition.lcdui.game.LayerManager manager -> a
    boolean isQuit -> a
    boolean ammoPause -> b
    javax.microedition.lcdui.Image ammoImage -> a
    javax.microedition.lcdui.game.Sprite alienAmmo -> a
    int x -> b
    int y -> c
    int maxY -> d
    void pause() -> a
    void resume() -> b
    void run() -> run
com.jjr.touchmare.AlienShipMover -> com.jjr.touchmare.b:
    boolean isQuit -> a
    boolean spritePause -> b
    javax.microedition.lcdui.game.LayerManager manager -> a
    int skillLevel -> a
    javax.microedition.lcdui.game.Sprite alienShip -> a
    int maxX -> b
    int maxY -> c
    int dir -> d
    int x -> e
    int y -> f
    com.jjr.touchmare.AlienAmmo alienAmmo -> a
    java.util.Random number99 -> a
    void ammoEnd() -> a
    void pause() -> b
    void resume() -> c
    void quit() -> d
    void run() -> run
    int random99() -> a
com.jjr.touchmare.GestureCanvas -> com.jjr.touchmare.c:
    com.jjr.touchmare.TouchMare midlet -> a
    boolean isQuit -> a
    javax.microedition.media.Player midiPlayer -> a
    boolean playerStoppedByUser -> b
    javax.microedition.lcdui.game.Sprite ownShip -> a
    javax.microedition.lcdui.game.Sprite[] alienShip -> a
    com.jjr.touchmare.AlienShipMover[] alienshipMover -> a
    javax.microedition.lcdui.game.LayerManager manager -> a
    int xOwnShip -> a
    int yOwnShip -> b
    com.jjr.touchmare.OwnAmmo ownAmmo -> a
    com.jjr.touchmare.OwnShipMover ownShipMover -> a
    int speed -> c
    int dir -> d
    int gamePoints -> e
    int alienShipsLeft -> f
    int ownShipsLeft -> g
    int ownAmmoLeft -> h
    int skillLevel -> i
    int shelterHits -> j
    javax.microedition.lcdui.game.Sprite shelterSprite -> b
    javax.microedition.media.Player alienHitPlayer -> b
    java.io.InputStream alienHitStreamSound -> a
    javax.microedition.media.Player ownHitPlayer -> c
    java.io.InputStream ownHitStreamSound -> b
    javax.microedition.media.Player shelterHitPlayer -> d
    java.io.InputStream shelterHitStreamSound -> c
    javax.microedition.lcdui.Image ownShipImage -> a
    javax.microedition.lcdui.Image alienshipImage -> b
    boolean ownShipHit -> c
    void updateOwnShipHit(boolean) -> a
    boolean getOwnShipHit() -> a
    void updateAlienShip(int,javax.microedition.lcdui.game.Sprite) -> a
    javax.microedition.lcdui.game.Sprite getAlienShip(int) -> a
    void updateGamePoints(int) -> a
    javax.microedition.lcdui.game.Sprite makeOwnShip(int,int) -> a
    javax.microedition.lcdui.game.Sprite makeShelter() -> a
    void makeAlienShip(int,int,int) -> a
    void run() -> run
    void drawDisplay(javax.microedition.lcdui.Graphics,javax.microedition.lcdui.Image) -> a
    void start() -> a
    void playAlienHit() -> b
    void playShelterHit() -> c
    javax.microedition.lcdui.game.TiledLayer createBackground() -> a
    void drawDisplayIntro(javax.microedition.lcdui.Graphics,javax.microedition.lcdui.Image,javax.microedition.lcdui.Image) -> a
    void gameOver() -> d
    void displayMenu(javax.microedition.lcdui.Image,boolean) -> a
com.jjr.touchmare.MyGestureListener -> com.jjr.touchmare.d:
    com.jjr.touchmare.TouchMare midlet -> a
    void gestureAction(java.lang.Object,com.nokia.mid.ui.gestures.GestureInteractiveZone,com.nokia.mid.ui.gestures.GestureEvent) -> gestureAction
com.jjr.touchmare.OwnAmmo -> com.jjr.touchmare.e:
    javax.microedition.lcdui.game.LayerManager manager -> a
    int skillLevel -> a
    boolean isQuit -> a
    javax.microedition.lcdui.Image ammoImage -> a
    javax.microedition.lcdui.game.Sprite ownAmmo -> a
    int xOwnAmmo -> b
    int yOwnAmmo -> c
    void run() -> run
com.jjr.touchmare.OwnShipMover -> com.jjr.touchmare.f:
    boolean isQuit -> a
    int skillLevel -> a
    javax.microedition.lcdui.game.Sprite ownShip -> a
    int maxX -> b
    int x -> c
    int y -> d
    int speed -> e
    int dir -> f
    void quit() -> a
    void run() -> run
com.jjr.touchmare.ShipDestroy -> com.jjr.touchmare.g:
    com.jjr.touchmare.GestureCanvas parent -> a
    javax.microedition.lcdui.game.LayerManager manager -> a
    javax.microedition.lcdui.game.Sprite ship -> a
    int index -> a
    int curFrame -> b
    int totFrame -> c
    void run() -> run
com.jjr.touchmare.TouchMare -> com.jjr.touchmare.TouchMare:
    javax.microedition.rms.RecordStore rs -> a
    int speed -> a
    int dir -> b
    int tapX -> c
    int tapY -> d
    boolean movementUpdated -> a
    boolean tapUpdated -> b
    boolean longPressUpdated -> c
    javax.microedition.lcdui.Display display -> a
    com.jjr.touchmare.GestureCanvas myCanvas -> a
    com.jjr.touchmare.MyGestureListener myGestureListener -> a
    javax.microedition.media.Player midiPlayer -> a
    boolean midiPlayerOn -> d
    boolean playerSuspended -> e
    void updatetap(int,int) -> a
    boolean istapUpdated() -> a
    int tapX() -> a
    int tapY() -> b
    void updateLongPress() -> a
    boolean isLongPressUpdated() -> b
    void updateMovement(int,int) -> b
    boolean isMovementUpdated() -> c
    int MovementSpeed() -> c
    int MovementDir() -> d
    void destroyApp(boolean) -> destroyApp
    void pauseApp() -> pauseApp
    void startApp() -> startApp
    void playerUpdate(javax.microedition.media.Player,java.lang.String,java.lang.Object) -> playerUpdate
    void updateHiScoreRS(int) -> a
    int getHiScoreRS() -> e
    javax.microedition.rms.RecordStore createStore() -> a
